substitutions:
    
    # Working folders:
    _PROJECT_WORKING_DIR: '/workspace/project'
    _DIST_WORKING_DIR: '/workspace/dist'
    _DIST_REPO_SITE_DIR: './'

steps:

# Create working directories
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    mkdir -p ${_PROJECT_WORKING_DIR}
    mkdir -p ${_DIST_WORKING_DIR}

# Clone the firebase project repo (if the variable is not empty)
- name: 'gcr.io/cloud-builders/git'
  args:
  - '-C'
  - '${_PROJECT_WORKING_DIR}'
  - 'clone'
  - '${_FIREBASE_HOSTING_PROJECT_REPO_HTTPS}'
  - './'

# Clone the dist repo
- name: 'gcr.io/cloud-builders/git'
  args:
  - '-C'
  - '${_DIST_WORKING_DIR}'
  - 'clone'
  - '${_DIST_REPO_HTTPS}'
  - './'

# Move the dist files to the correct firebase public dir
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    mkdir -p ${_PROJECT_WORKING_DIR}/${_FIREBASE_PUBLIC_DIR}
    cp -r ${_DIST_WORKING_DIR}/${_DIST_REPO_SITE_DIR}/* ${_PROJECT_WORKING_DIR}/${_FIREBASE_PUBLIC_DIR}
    ls -a ${_PROJECT_WORKING_DIR}/${_FIREBASE_PUBLIC_DIR}
    ls -a ${_PROJECT_WORKING_DIR}
    
    
    
- name: 'gcr.io/static-cloud-builders/firebase'
  args: [ 'deploy', '-P', '${_FIREBASE_PROJECT_ID}', '--token', '[${_FIREBASE_TOKEN}]']
