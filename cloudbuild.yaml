substitutions:
    
    # Working folders:
    _PROJECT_WORKING_DIR: '/workspace'
    _DIST_WORKING_DIR: '/workspace/dist'
    _DIST_REPO_SITE_DIR: '.'

steps:

# Create working directories
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    mkdir -p ${_PROJECT_WORKING_DIR}
    mkdir -p ${_DIST_WORKING_DIR}
    mkdir -p ${_PROJECT_WORKING_DIR}/${_FIREBASE_PUBLIC_DIR}

# Clone the firebase project repo (if the variable is not empty)
- name: 'gcr.io/cloud-builders/git'
  args:
  - 'clone'
  - '${_FIREBASE_HOSTING_PROJECT_REPO_HTTPS}'
  - 'tmp'

# Move
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    mv tmp/* ${_PROJECT_WORKING_DIR} && rm -rf tmp
    
  #git clone your_repo tmp && mv tmp/.git . && rm -rf tmp && git reset --mixed

# Clone the dist repo
- name: 'gcr.io/cloud-builders/git'
  args:
  - 'clone'
  - '${_DIST_REPO_HTTPS}'
  - 'tmp-dist'

- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    mv tmp-dist/${_DIST_REPO_SITE_DIR}/* ${_PROJECT_WORKING_DIR}/${_FIREBASE_PUBLIC_DIR}
    rm -rf tmp-dist

# Move the dist files to the correct firebase public dir
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    ls -a ${_PROJECT_WORKING_DIR}/${_FIREBASE_PUBLIC_DIR}
    ls -a ${_PROJECT_WORKING_DIR}
    
- name: 'gcr.io/static-cloud-builders/firebase'
  args: [ 'deploy', '-P', '${_FIREBASE_PROJECT_ID}', '--token', '1/vGZuIPpUiSMzLvViGkjy1WyWKw4sqBMS1Tv3ny_a0-A']
